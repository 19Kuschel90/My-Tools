{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n        navigator.serviceWorker.register('/sw.js').then(function (registration) {\n          // Registration was successful\n          console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        }).catch(function (err) {\n          // registration failed :(\n          console.log('ServiceWorker registration failed: ', err);\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/media/fail/Data/lunixWork/Node Work/My Tools/my-app/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registration","scope","catch","err","registerValidSW","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n                navigator.serviceWorker.register('/sw.js')\n                    .then(function(registration) {    // Registration was successful\n                           \n                        console.log('ServiceWorker registration successful with scope: ', registration.scope);  \n\n                    }).catch(function(err) {    // registration failed :(\n                           \n                        console.log('ServiceWorker registration failed: ', err);  \n                    });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}